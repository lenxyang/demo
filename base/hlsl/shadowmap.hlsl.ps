// using row_major
#pragma pack_matrix(row_major)

#include "lordaeron/effect/lighting.hlsl"

struct VsOutput {
  float4 position:SV_POSITION;
  float3 worldpos: WPOS;
  float3 normal:NORMAL;
  float3 viewin: VIEWIN;
  float2 texcoord: TEXCOORD0;
  float4 projtex: PROJTEX;
};

cbuffer c_buffer {
   DirLight   dirlight;
   PointLight pointlight;
   SpotLight  spotlight;
   float      ambient_scalar;
   float      specular_scalar;
};

Texture2D texmap;
Texture2D shadowmap;
SamplerState texsampler;
SamplerState smsampler {
  Filter = MIN_MAG_MIP_LINEAR;
  AddressU = Clamp;
  AddressV = Clamp;
};

float4 ps_main(VsOutput o):SV_TARGET {
  o.projtex = o.projtex / o.projtex.w;;
  o.projtex.x = clamp((o.projtex.x + 1.0f) * 0.5f, 0.0f, 1.0);
  o.projtex.y = clamp((1.0f - o.projtex.y) * 0.5f, 0.0f, 1.0);
  float depth = shadowmap.Sample(smsampler, o.projtex.xy);
  float4 color = texmap.Sample(texsampler, o.texcoord);
  return float4(depth, depth, depth, 1.0);
  

  float3 normal = o.normal;
  Matrial mtrl;
  mtrl.ambient  = (ambient_scalar) * color;
  mtrl.specular = specular_scalar * color;
  mtrl.diffuse  = color;
  mtrl.emission = float4(0.0f, 0.0f, 0.0f, 0.0f);
  mtrl.power    = 4;
  mtrl.alpha    = 1.0f;

  float3 dir_color = CalcDirLightColor(dirlight, normal, o.viewin, mtrl);
  float3 point_color = CalcPointLightColor(pointlight, o.worldpos,
                                           normal, o.viewin, mtrl);
  float3 spot_color = CalcSpotLightColor(spotlight, o.worldpos,
                                         normal, o.viewin, mtrl);
  float spot_factor = (depth < o.position.z) ? 1.0 : 0.0f; 
  return float4(spot_color * spot_factor + dir_color + point_color, mtrl.alpha);
}
