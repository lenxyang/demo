// using row_major
#pragma pack_matrix(row_major)

#include "lordaeron/effect/lighting.hlsl"

struct VsOutput {
  float4 position:SV_POSITION;
  float3 worldpos: WPOS;
  float3 normal:NORMAL;
  float3 binormal:BINORMAL;
  float3 tangent:TANGENT;
  float3 viewin: VIEWIN;
  float2 texcoord: TEXCOORD0;
};

cbuffer c_buffer {
   DirLight   dirlight;
   PointLight pointlight;
   SpotLight  spotlight;
   float      ambient_scalar;
   float      specular_scalar;
};

Texture2D diffuse_map;
Texture2D nmh_map;
SamplerState texsampler1;
SamplerState texsampler2;

float3 NormalSampleToWorldSpace(float3 normal_sample, float3 T, float3 N, float3 B) {
  float3 n = float3(normal_sample.xyz * 2.0 - 1.0f);
  float3 r = float3(0, 0, 0);
  r.x = dot(T, n);
  r.y = dot(B, n);
  r.z = dot(N, n);
  return r;
}	

float4 ps_main(VsOutput o):SV_TARGET {
  float height_scale = 0.05f;
  float height = nmh_map.Sample(texsampler2, o.texcoord).w;
  height = height_scale * (height  - 0.5f);
  float2 offsetdir = normalize(o.viewin.xy);
  float2 offset_sample = o.texcoord + offsetdir * height;
  float3 normalsamp = nmh_map.Sample(texsampler2, offset_sample).xyz;
  float4 color = diffuse_map.Sample(texsampler1, o.texcoord);
  
  float3 normal = NormalSampleToWorldSpace(normalsamp.xyz, o.tangent, o.normal, o.binormal);
  Matrial mtrl;
  mtrl.ambient  = (ambient_scalar) * color;
  mtrl.specular = specular_scalar * color;
  mtrl.diffuse  = color;
  mtrl.emission = float4(0.0f, 0.0f, 0.0f, 0.0f);
  mtrl.power    = 4;
  mtrl.alpha    = 1.0f;

  float3 dir_color = CalcDirLightColor(dirlight, normal, o.viewin, mtrl);
  float3 point_color = CalcPointLightColor(pointlight, o.worldpos,
                                           normal, o.viewin, mtrl);
  float3 spot_color = CalcSpotLightColor(spotlight, o.worldpos,
                                         normal, o.viewin, mtrl);
  return float4(spot_color + dir_color + point_color, mtrl.alpha);
}
